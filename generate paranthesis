#include <stdlib.h>
#include <string.h>

// Helper function to compute Catalan number
int catalan(int n) {
    long res = 1;
    for (int i = 0; i < n; ++i) {
        res = res * 2 * (2 * i + 1) / (i + 2);
    }
    return (int)res;
}

// Backtracking helper
void backtrack(char** res, int* returnSize, char* current, int pos, int open, int close, int n) {
    if (pos == 2 * n) {
        current[pos] = '\0';
        res[*returnSize] = strdup(current);
        (*returnSize)++;
        return;
    }
    if (open < n) {
        current[pos] = '(';
        backtrack(res, returnSize, current, pos + 1, open + 1, close, n);
    }
    if (close < open) {
        current[pos] = ')';
        backtrack(res, returnSize, current, pos + 1, open, close + 1, n);
    }
}

// Main function as required by LeetCode
char** generateParenthesis(int n, int* returnSize) {
    int maxCombinations = catalan(n);
    char** res = (char*)malloc(sizeof(char) * maxCombinations);
    char* current = (char*)malloc(sizeof(char) * (2 * n + 1));
    *returnSize = 0;
    
    backtrack(res, returnSize, current, 0, 0, 0, n);
    free(current);
    return res;
}
